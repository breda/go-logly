// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/v1/log.proto

package logv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoglyClient is the client API for Logly service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoglyClient interface {
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	AppendStream(ctx context.Context, opts ...grpc.CallOption) (Logly_AppendStreamClient, error)
	FetchStream(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (Logly_FetchStreamClient, error)
}

type loglyClient struct {
	cc grpc.ClientConnInterface
}

func NewLoglyClient(cc grpc.ClientConnInterface) LoglyClient {
	return &loglyClient{cc}
}

func (c *loglyClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/log.v1.Logly/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loglyClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/log.v1.Logly/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loglyClient) AppendStream(ctx context.Context, opts ...grpc.CallOption) (Logly_AppendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Logly_ServiceDesc.Streams[0], "/log.v1.Logly/AppendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loglyAppendStreamClient{stream}
	return x, nil
}

type Logly_AppendStreamClient interface {
	Send(*AppendRequest) error
	Recv() (*AppendResponse, error)
	grpc.ClientStream
}

type loglyAppendStreamClient struct {
	grpc.ClientStream
}

func (x *loglyAppendStreamClient) Send(m *AppendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loglyAppendStreamClient) Recv() (*AppendResponse, error) {
	m := new(AppendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loglyClient) FetchStream(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (Logly_FetchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Logly_ServiceDesc.Streams[1], "/log.v1.Logly/FetchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loglyFetchStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logly_FetchStreamClient interface {
	Recv() (*FetchResponse, error)
	grpc.ClientStream
}

type loglyFetchStreamClient struct {
	grpc.ClientStream
}

func (x *loglyFetchStreamClient) Recv() (*FetchResponse, error) {
	m := new(FetchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoglyServer is the server API for Logly service.
// All implementations must embed UnimplementedLoglyServer
// for forward compatibility
type LoglyServer interface {
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	AppendStream(Logly_AppendStreamServer) error
	FetchStream(*FetchRequest, Logly_FetchStreamServer) error
	mustEmbedUnimplementedLoglyServer()
}

// UnimplementedLoglyServer must be embedded to have forward compatible implementations.
type UnimplementedLoglyServer struct {
}

func (UnimplementedLoglyServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedLoglyServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedLoglyServer) AppendStream(Logly_AppendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendStream not implemented")
}
func (UnimplementedLoglyServer) FetchStream(*FetchRequest, Logly_FetchStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchStream not implemented")
}
func (UnimplementedLoglyServer) mustEmbedUnimplementedLoglyServer() {}

// UnsafeLoglyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoglyServer will
// result in compilation errors.
type UnsafeLoglyServer interface {
	mustEmbedUnimplementedLoglyServer()
}

func RegisterLoglyServer(s grpc.ServiceRegistrar, srv LoglyServer) {
	s.RegisterService(&Logly_ServiceDesc, srv)
}

func _Logly_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoglyServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.v1.Logly/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoglyServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logly_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoglyServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.v1.Logly/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoglyServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logly_AppendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoglyServer).AppendStream(&loglyAppendStreamServer{stream})
}

type Logly_AppendStreamServer interface {
	Send(*AppendResponse) error
	Recv() (*AppendRequest, error)
	grpc.ServerStream
}

type loglyAppendStreamServer struct {
	grpc.ServerStream
}

func (x *loglyAppendStreamServer) Send(m *AppendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loglyAppendStreamServer) Recv() (*AppendRequest, error) {
	m := new(AppendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Logly_FetchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoglyServer).FetchStream(m, &loglyFetchStreamServer{stream})
}

type Logly_FetchStreamServer interface {
	Send(*FetchResponse) error
	grpc.ServerStream
}

type loglyFetchStreamServer struct {
	grpc.ServerStream
}

func (x *loglyFetchStreamServer) Send(m *FetchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Logly_ServiceDesc is the grpc.ServiceDesc for Logly service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logly_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log.v1.Logly",
	HandlerType: (*LoglyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _Logly_Append_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Logly_Fetch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppendStream",
			Handler:       _Logly_AppendStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FetchStream",
			Handler:       _Logly_FetchStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/log.proto",
}
